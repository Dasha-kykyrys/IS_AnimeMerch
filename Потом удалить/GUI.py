# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1311, 858)
        MainWindow.setStyleSheet("QMainWindow{\n"
"    background-color: rgba(255, 234, 210, 1);\n"
"}\n"
"\n"
"QScrollBar:horizontal{\n"
"    border: 2px solid #6E491E;\n"
"    background:  #E7C49C;\n"
"       height: 20px;\n"
"    margin: 0px 20px 0 20px;\n"
"}\n"
"\n"
"QScrollBar::handle:horizontal {\n"
"    background: #7F5525;\n"
"    min-width: 20px;\n"
"}\n"
"\n"
"QScrollBar::add-line:horizontal {\n"
"    border: 2px solid #6E491E;\n"
"   background:  #E7C49C;\n"
"    width: 20px;\n"
"    subcontrol-position: right;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"\n"
"QScrollBar::sub-line:horizontal{\n"
"    border: 2px solid #6E491E;\n"
"   background:  #E7C49C;\n"
"    width: 20px;\n"
"    subcontrol-position: left;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"\n"
"QScrollBar::left-arrow:horizontal {\n"
"    width: 10px;\n"
"    height: 10px;\n"
"    border-image: url(:/image/scrollbar_left.png);\n"
"}\n"
"\n"
"QScrollBar::right-arrow:horizontal  {\n"
"    width: 10px;\n"
"    height: 10px;\n"
"    border-image: url(:/image/scrollbar_right.png);\n"
"}\n"
"\n"
"QScrollBar:vertical{\n"
"    border: 2px solid #6E491E;\n"
"    background:  #E7C49C;\n"
"    width: 20px;\n"
"    margin: 20px 0px 20 0px;\n"
"}\n"
"\n"
"QScrollBar::handle:vertical {\n"
"    background: #7F5525;\n"
"    min-height: 20px;\n"
"}\n"
"\n"
"QScrollBar::add-line:vertical {\n"
"    border: 2px solid #6E491E;\n"
"   background:  #E7C49C;\n"
"    height:  20px;\n"
"    subcontrol-position: bottom;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"\n"
"QScrollBar::sub-line:vertical{\n"
"    border: 2px solid #6E491E;\n"
"   background:  #E7C49C;\n"
"    height: 20px;\n"
"    subcontrol-position: top;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"\n"
"QScrollBar::up-arrow:vertical {\n"
"    width: 10px;\n"
"    height: 10px;\n"
"    border-image: url(:/image/scrollbar_up.png);\n"
"}\n"
"\n"
"QScrollBar::down-arrow:vertical  {\n"
"    width: 10px;\n"
"    height: 10px;\n"
"    border-image: url(:/image/scrollbar_down.png);\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, -1)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.work_area = QtWidgets.QHBoxLayout()
        self.work_area.setContentsMargins(30, -1, 30, -1)
        self.work_area.setSpacing(7)
        self.work_area.setObjectName("work_area")
        self.catalog = QtWidgets.QVBoxLayout()
        self.catalog.setContentsMargins(-1, 12, -1, 12)
        self.catalog.setSpacing(23)
        self.catalog.setObjectName("catalog")
        self.catalog_label = QtWidgets.QLabel(self.centralwidget)
        self.catalog_label.setMinimumSize(QtCore.QSize(101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.catalog_label.setFont(font)
        self.catalog_label.setStyleSheet("color: #6E491E;")
        self.catalog_label.setObjectName("catalog_label")
        self.catalog.addWidget(self.catalog_label)
        self.catalog_table = QtWidgets.QTableView(self.centralwidget)
        self.catalog_table.setStyleSheet("QTableView {\n"
"    border:none;\n"
"    border-top:2px solid #6E491E; \n"
"      border-left: 2px solid #6E491E; \n"
"    border-radius: 5px;\n"
"    gridline-color: #6E491E; \n"
"    color: #563916;    \n"
"    font: 14pt \"Times New Roman\";\n"
"  }\n"
"\n"
"QTableView::item {\n"
"    border-bottom:1px solid #6E491E; \n"
"      border-left: 0.4px solid #6E491E; \n"
"    border-right: 0.5px solid #6E491E; \n"
"}\n"
" \n"
"QTableView::item:selected {\n"
"    background-color: rgb(218, 218, 218);\n"
" }\n"
"\n"
"QHeaderView::section {\n"
"    border: none;\n"
"     border-bottom: 2px solid #6E491E; \n"
"      border-left: 0.4px solid #6E491E; \n"
"    border-right: 2px solid #6E491E; ; \n"
"    background-color: #E7C49C; \n"
"    color: #563916;\n"
"    font: 14pt \"Times New Roman\";\n"
"    padding: 3px;\n"
"}\n"
"\n"
"QHeaderView::down-arrow {\n"
"    width: 26px; \n"
"    height:18px; \n"
"    subcontrol-position: bottom right; \n"
"}\n"
"")
        self.catalog_table.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.catalog_table.setFrameShadow(QtWidgets.QFrame.Plain)
        self.catalog_table.setLineWidth(0)
        self.catalog_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.catalog_table.setTabKeyNavigation(False)
        self.catalog_table.setProperty("showDropIndicator", False)
        self.catalog_table.setDragDropOverwriteMode(False)
        self.catalog_table.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.catalog_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.catalog_table.setSortingEnabled(True)
        self.catalog_table.setObjectName("catalog_table")
        self.catalog_table.horizontalHeader().setCascadingSectionResizes(False)
        self.catalog_table.horizontalHeader().setHighlightSections(False)
        self.catalog_table.horizontalHeader().setSortIndicatorShown(True)
        self.catalog_table.horizontalHeader().setStretchLastSection(True)
        self.catalog_table.verticalHeader().setVisible(False)
        self.catalog_table.verticalHeader().setStretchLastSection(True)
        self.catalog.addWidget(self.catalog_table)
        self.search = QtWidgets.QHBoxLayout()
        self.search.setObjectName("search")
        self.search_field = QtWidgets.QTextEdit(self.centralwidget)
        self.search_field.setMinimumSize(QtCore.QSize(416, 53))
        self.search_field.setMaximumSize(QtCore.QSize(16777215, 53))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.search_field.setFont(font)
        self.search_field.setStyleSheet("QTextEdit{\n"
"    border: 2px solid #6E491E;\n"
"    color: #563916;\n"
"    font: 18pt \"Times New Roman\";\n"
"}")
        self.search_field.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.search_field.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.search_field.setObjectName("search_field")
        self.search.addWidget(self.search_field)
        self.find_button = QtWidgets.QPushButton(self.centralwidget)
        self.find_button.setMinimumSize(QtCore.QSize(155, 53))
        self.find_button.setMaximumSize(QtCore.QSize(155, 53))
        self.find_button.setStyleSheet("QPushButton{\n"
"    border-image: url(:/image/find_button.png);\n"
"}\n"
"\n"
"QPushButton:pressed{\n"
"    border-image: url(:/image/find_pressbutton.png);\n"
"}\n"
"")
        self.find_button.setText("")
        self.find_button.setObjectName("find_button")
        self.search.addWidget(self.find_button)
        self.catalog.addLayout(self.search)
        self.work_area.addLayout(self.catalog)
        self.filling = QtWidgets.QVBoxLayout()
        self.filling.setContentsMargins(20, -1, 20, -1)
        self.filling.setSpacing(50)
        self.filling.setObjectName("filling")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.filling.addItem(spacerItem)
        self.add_button = QtWidgets.QPushButton(self.centralwidget)
        self.add_button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.add_button.sizePolicy().hasHeightForWidth())
        self.add_button.setSizePolicy(sizePolicy)
        self.add_button.setMinimumSize(QtCore.QSize(59, 53))
        self.add_button.setStyleSheet("QPushButton{\n"
"    border-image: url(:/image/add_button.png);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border-image: url(:/image/add_pressbutton.png);\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    border-image: url(:/image/add_disablebutton.png);\n"
"}")
        self.add_button.setText("")
        self.add_button.setObjectName("add_button")
        self.filling.addWidget(self.add_button)
        self.remove_button = QtWidgets.QPushButton(self.centralwidget)
        self.remove_button.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.remove_button.sizePolicy().hasHeightForWidth())
        self.remove_button.setSizePolicy(sizePolicy)
        self.remove_button.setMinimumSize(QtCore.QSize(59, 53))
        self.remove_button.setStyleSheet("QPushButton{\n"
"    border-image: url(:/image/remove_button.png);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border-image: url(:/image/remove_pressbutton.png);\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    border-image: url(:/image/remove_disablebutton.png);\n"
"}")
        self.remove_button.setText("")
        self.remove_button.setObjectName("remove_button")
        self.filling.addWidget(self.remove_button)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.filling.addItem(spacerItem1)
        self.work_area.addLayout(self.filling)
        self.check = QtWidgets.QVBoxLayout()
        self.check.setContentsMargins(-1, 12, -1, 12)
        self.check.setSpacing(23)
        self.check.setObjectName("check")
        self.chek_label = QtWidgets.QLabel(self.centralwidget)
        self.chek_label.setMinimumSize(QtCore.QSize(101, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.chek_label.setFont(font)
        self.chek_label.setStyleSheet("color: #6E491E;")
        self.chek_label.setObjectName("chek_label")
        self.check.addWidget(self.chek_label)
        self.chek_table = QtWidgets.QTableView(self.centralwidget)
        self.chek_table.setStyleSheet("QTableView {\n"
"    border:none;\n"
"    border-top:2px solid #6E491E; \n"
"      border-left: 2px solid #6E491E; \n"
"    border-radius: 5px;\n"
"    gridline-color: #6E491E; \n"
"    color: #563916;    \n"
"    font: 14pt \"Times New Roman\";\n"
"  }\n"
"\n"
"QTableView::item {\n"
"    border-bottom:1px solid #6E491E; \n"
"      border-left: 0.4px solid #6E491E; \n"
"    border-right: 0.5px solid #6E491E; \n"
"}\n"
" \n"
"QTableView::item:selected {\n"
"    background-color: rgb(218, 218, 218);\n"
" }\n"
"\n"
"QHeaderView::section {\n"
"    border: none;\n"
"     border-bottom: 2px solid #6E491E; \n"
"      border-left: 0.4px solid #6E491E; \n"
"    border-right: 2px solid #6E491E; ; \n"
"    background-color: #E7C49C; \n"
"    color: #563916;\n"
"    font: 14pt \"Times New Roman\";\n"
"    padding: 3px;\n"
"}\n"
"\n"
"QHeaderView::down-arrow {\n"
"    width: 26px; \n"
"    height:18px; \n"
"    subcontrol-position: bottom right; \n"
"}\n"
"")
        self.chek_table.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.chek_table.setFrameShadow(QtWidgets.QFrame.Plain)
        self.chek_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.chek_table.setTabKeyNavigation(False)
        self.chek_table.setProperty("showDropIndicator", False)
        self.chek_table.setDragDropOverwriteMode(False)
        self.chek_table.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.chek_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.chek_table.setSortingEnabled(True)
        self.chek_table.setObjectName("chek_table")
        self.chek_table.horizontalHeader().setCascadingSectionResizes(False)
        self.chek_table.horizontalHeader().setHighlightSections(False)
        self.chek_table.horizontalHeader().setSortIndicatorShown(True)
        self.chek_table.horizontalHeader().setStretchLastSection(True)
        self.chek_table.verticalHeader().setVisible(False)
        self.chek_table.verticalHeader().setCascadingSectionResizes(False)
        self.chek_table.verticalHeader().setStretchLastSection(True)
        self.check.addWidget(self.chek_table)
        self.result = QtWidgets.QHBoxLayout()
        self.result.setObjectName("result")
        self.result_label = QtWidgets.QLabel(self.centralwidget)
        self.result_label.setMinimumSize(QtCore.QSize(101, 37))
        self.result_label.setMaximumSize(QtCore.QSize(101, 37))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.result_label.setFont(font)
        self.result_label.setStyleSheet("color: #6E491E;")
        self.result_label.setObjectName("result_label")
        self.result.addWidget(self.result_label)
        self.total_label = QtWidgets.QLabel(self.centralwidget)
        self.total_label.setMinimumSize(QtCore.QSize(146, 37))
        self.total_label.setMaximumSize(QtCore.QSize(16777215, 37))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.total_label.setFont(font)
        self.total_label.setStyleSheet("color: #C66B00;")
        self.total_label.setObjectName("total_label")
        self.result.addWidget(self.total_label)
        self.confirm_button = QtWidgets.QPushButton(self.centralwidget)
        self.confirm_button.setEnabled(False)
        self.confirm_button.setMinimumSize(QtCore.QSize(195, 53))
        self.confirm_button.setMaximumSize(QtCore.QSize(195, 53))
        self.confirm_button.setStyleSheet("QPushButton{\n"
"    border-image: url(:/image/confirm_button.png);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border-image: url(:/image/confirm_pressbutton.png);\n"
"}\n"
"\n"
"QPushButton:disabled {\n"
"    border-image: url(:/image/confirm_disablebutton.png);\n"
"}")
        self.confirm_button.setText("")
        self.confirm_button.setObjectName("confirm_button")
        self.result.addWidget(self.confirm_button)
        self.check.addLayout(self.result)
        self.work_area.addLayout(self.check)
        self.gridLayout_2.addLayout(self.work_area, 2, 0, 1, 1)
        self.tabs = QtWidgets.QFrame(self.centralwidget)
        self.tabs.setStyleSheet("background-color: #7F5525;")
        self.tabs.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.tabs.setFrameShadow(QtWidgets.QFrame.Raised)
        self.tabs.setObjectName("tabs")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.tabs)
        self.horizontalLayout_6.setContentsMargins(30, 27, 30, 0)
        self.horizontalLayout_6.setSpacing(22)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.catalog_button = QtWidgets.QPushButton(self.tabs)
        self.catalog_button.setEnabled(False)
        self.catalog_button.setMinimumSize(QtCore.QSize(192, 55))
        self.catalog_button.setAutoFillBackground(False)
        self.catalog_button.setStyleSheet("QPushButton{\n"
"    border-image: url(:/image/catalog_button.png);\n"
"}\n"
"\n"
"QPushButton:disabled{\n"
"    border-image: url(:/image/catalog_pressbutton.png);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border-image: url(:/image/catalog_hoverbutton.png);\n"
"}")
        self.catalog_button.setText("")
        self.catalog_button.setObjectName("catalog_button")
        self.horizontalLayout_6.addWidget(self.catalog_button)
        self.sales_button = QtWidgets.QPushButton(self.tabs)
        self.sales_button.setMinimumSize(QtCore.QSize(192, 55))
        self.sales_button.setStyleSheet("QPushButton{\n"
"    border-image: url(:/image/sales_button.png);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border-image: url(:/image/sales_hoverbutton.png);\n"
"}")
        self.sales_button.setText("")
        self.sales_button.setObjectName("sales_button")
        self.horizontalLayout_6.addWidget(self.sales_button)
        self.manaement_button = QtWidgets.QPushButton(self.tabs)
        self.manaement_button.setEnabled(True)
        self.manaement_button.setMinimumSize(QtCore.QSize(192, 55))
        self.manaement_button.setStyleSheet("QPushButton{\n"
"    border-image: url(:/image/managment_button.png);\n"
"}\n"
"\n"
"QPushButton:disabled{\n"
"    border-image: url(:/image/managment_pressbutton.png);\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    border-image: url(:/image/managment_hoverbutton.png);\n"
"}")
        self.manaement_button.setText("")
        self.manaement_button.setObjectName("manaement_button")
        self.horizontalLayout_6.addWidget(self.manaement_button)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem2)
        self.gridLayout_2.addWidget(self.tabs, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.catalog_label.setText(_translate("MainWindow", "Каталог"))
        self.chek_label.setText(_translate("MainWindow", "Чек"))
        self.result_label.setText(_translate("MainWindow", "Итого:"))
        self.total_label.setText(_translate("MainWindow", "сумма"))
import images_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
